// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.blazerobotics.orion;

import org.blazerobotics.orion.commands.*;

import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystickLeft;
    public Joystick joystickRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystickSpecial;
    public int btnWinchUp;
    public int btnWinchDown;
	public int btnWinchPower;
	private int btnLiftUp;
	private int btnLiftDown;
	public int btnPTO;
	private int btnRightControl = 9;
	private int btnLeftControl = 8;
	private int btnbarOut = 6;
	private int btnbarIn = 7;


    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystickRight = new Joystick(1);
        
        joystickLeft = new Joystick(0);              
        

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("Teleop Command", new DriveCommand());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        joystickSpecial = new Joystick(2);
        btnWinchUp = 4;
        btnWinchDown = 5;
        btnWinchPower = 3;        
        
        btnLiftUp = 4;
        btnLiftDown = 5;
        
        btnPTO = 1;
        
        Button liftUp = new JoystickButton(joystickLeft, btnLiftUp);
        //liftUp.whenPressed(new LinearLiftCommand(RobotMap.liftAmount));
        Button liftDown = new JoystickButton(joystickLeft, btnLiftDown);
        //liftDown.whenPressed(new LinearLiftCommand(RobotMap.liftAmount * -1));
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystickLeft() {
        return joystickLeft;
    }

    public Joystick getJoystickRight() {
        return joystickRight;
    }
    public boolean winchUp() {
    	return joystickSpecial.getRawButton(btnWinchUp);
    }
    public boolean winchDown() {
    	return joystickSpecial.getRawButton(btnWinchDown);
    }

	public boolean winchHighPower() {		
		return joystickSpecial.getRawButton(btnWinchPower);
	}

	public boolean liftUp() {
		// TODO Auto-generated method stub
		return joystickLeft.getRawButton(btnLiftUp);
	}

	public boolean liftDown() {
		// TODO Auto-generated method stub
		return joystickLeft.getRawButton(btnLiftDown);
	}

	public boolean rightControl() {
		
		return joystickSpecial.getRawButton(btnRightControl);
	}
	public boolean leftControl() {
		
		return joystickSpecial.getRawButton(btnLeftControl);
	}

	public boolean fourBarOut() {
		return joystickSpecial.getRawButton(btnbarOut );
	}

	public boolean fourBarIn() {
		return joystickSpecial.getRawButton(btnbarIn);
	}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

