// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.blazerobotics.orion.subsystems;

import org.blazerobotics.orion.RobotMap;
import org.blazerobotics.orion.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class FourBarSubsystem extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput foreBackLeft = RobotMap.fourBarSubsystemForeBackFront;
    DigitalInput foreBackRight = RobotMap.fourBarSubsystemForeBackBack;
    DigitalInput grabBackLimitSwitch = RobotMap.fourBarSubsystemGrabBackLimitSwitch;
    SpeedController leftMotor1 = RobotMap.fourBarSubsystemLeftMotor1;
    SpeedController rightMotor1 = RobotMap.fourBarSubsystemRightMotor1;
    DoubleSolenoid secondaryActuatorSolenoid = RobotMap.fourBarSubsystemSecondaryActuatorSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void drive(double speed, boolean left, boolean right) {
    	leftMotor1.set(speed*-1 * (left ? 1 : 0));
    	rightMotor1.set(speed*-1 * (right ? 1 : 0));
    }
    public void drive(double speed) {
    	drive(speed, true, true);
    }
    public void setSecondary(boolean secondary) {
    	secondaryActuatorSolenoid.set(secondary ? Value.kForward: Value.kReverse);
    }
	public boolean getLeft() {
		return !foreBackLeft.get();
	}
	public boolean getRight() {
		return !foreBackRight.get();
	}
}

