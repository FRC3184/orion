// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.blazerobotics.orion;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.vision.USBCamera;

import org.blazerobotics.orion.commands.*;
import org.blazerobotics.orion.subsystems.*;

import com.ni.vision.NIVision.FlipAxis;
import com.ni.vision.NIVision.Image;
import com.ni.vision.NIVision;
import com.ni.vision.NIVision.InterpolationMethod;
import com.ni.vision.NIVision.Rect;
import com.ni.vision.VisionException;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    Command teleopCommand;
    Command canArmCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveSubsystem driveSubsystem;
    public static PneumaticSubsystem pneumaticSubsystem;
    public static CanArmSubsystem canArmSubsystem;
    public static LinearLiftSubsystem linearLiftSubsystem;
    public static GenericSensorSubsystem genericSensorSubsystem;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Preferences prefs;
	public static FunLights ledSubsystem;
	public static IntakeBarSubsystem intakeBarSubsystem;
	public static GrabArmSubsystem grabSubsystem;
    
    CameraServer server;
    boolean camera = false;
    USBCamera camFront;
    int camTick = 0;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
    	prefs = Preferences.getInstance();
    	prefs.putBoolean("useArcade", true);
    	prefs.putDouble("kD", 0.0);
    	prefs.putDouble("kP", 0.05);
    	prefs.save();
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSubsystem = new DriveSubsystem();
        pneumaticSubsystem = new PneumaticSubsystem();
        canArmSubsystem = new CanArmSubsystem();
        linearLiftSubsystem = new LinearLiftSubsystem(0.2, 0, 0);
        genericSensorSubsystem = new GenericSensorSubsystem();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        ledSubsystem = new FunLights();
        intakeBarSubsystem = new IntakeBarSubsystem();
        grabSubsystem = new GrabArmSubsystem();
        
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        teleopCommand = new DriveCommand();
        canArmCommand = new CanArmCommand();
        
        //the camera name (ex "cam0") can be found through the roborio web interface
        try {
        	camFront = new USBCamera("cam0");
        	camera = true;
            
            server = CameraServer.getInstance();
            server.setQuality(50);
            camFront.openCamera();
            camFront.startCapture();
        }
        catch (VisionException ve) {
        	System.out.println("No camera at cam0 ... ignoring");
        	if (camFront != null) {
        		camFront.stopCapture();
        		camFront.closeCamera();
        	}
        }
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        teleopCommand.start();
        canArmCommand.start();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
        camTick++;
        if (camTick == 1 && camera) {
        	camTick = 0;
        	Image image = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
        	camFront.getImage(image);
        	NIVision.imaqResample(image, image, 160, 160, InterpolationMethod.BILINEAR, new Rect(0, 0, 160,120));
        	NIVision.imaqFlip(image, image, FlipAxis.DIAG_R_TO_L_AXIS);
        	NIVision.imaqResample(image, image, 160, 120, InterpolationMethod.BILINEAR, new Rect(0,0,160,160));
        	
        	CameraServer.getInstance().setImage(image);
        	
        }
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
