// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.blazerobotics.orion.commands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;

import org.blazerobotics.orion.Robot;
import org.blazerobotics.orion.RobotMap;

import java.lang.Math;

/**
 *
 */
public class DriveCommand extends Command {	
	double lastThrottle = 0;
	private double startAngle;
	private double lastTurn;

    public DriveCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveSubsystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	boolean pto = Robot.oi.joystickRight.getRawButton(Robot.oi.btnPTO);
    	Robot.driveSubsystem.setHighGear(Robot.oi.joystickLeft.getRawButton(1));
    	Robot.driveSubsystem.setPTO(pto);
    	double turn = Robot.oi.getJoystickRight().getX();
    	if ((Math.abs(lastThrottle) < 0.1 && Math.abs(Robot.oi.getJoystickLeft().getY()) > 0.1) || (Math.abs(turn) > 0.1)) {
    		startAngle = Robot.genericSensorSubsystem.getAngle();
    	}
    	//DriverStation.reportError(Robot.genericSensorSubsystem.getAngle() + "\n", false);
    	if (Robot.prefs.getBoolean("useArcade", false)) {
    		
    		if (Math.abs(turn) < 0.1 && Math.abs(Robot.oi.getJoystickLeft().getY()) > 0.1 && Math.abs(lastTurn) < 0.1) {
    			turn = (startAngle - Robot.genericSensorSubsystem.getAngle())*0.05;
    		}
    		Robot.driveSubsystem.arcadeDrive(Robot.oi.getJoystickLeft().getY(), turn * (pto ? 0 : 1));
    	}
    	else {
    		Robot.driveSubsystem.tankDrive(Robot.oi.getJoystickLeft().getY(), Robot.oi.getJoystickRight().getY());
    	}
    	lastThrottle = Robot.oi.getJoystickLeft().getY();
    	lastTurn = turn;
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
