// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.blazerobotics.orion;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    public static final double liftAmount = 2;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveSubsystemLeftFrontMotor;
    public static SpeedController driveSubsystemLeftBackMotor;
    public static SpeedController driveSubsystemRightFrontMotor;
    public static SpeedController driveSubsystemRightBackMotor;
    public static RobotDrive driveSubsystemDrive;
    public static Compressor pneumaticSubsystemCompressor;
    public static DigitalInput canArmSubsystemTopLimitSwitch;
    public static DigitalInput canArmSubsystemBottomLimitSwitch;
    public static CANTalon canArmSubsystemLeftWinchSpeedController;
    public static CANTalon canArmSubsystemRightWinchSpeedController;
    public static DigitalInput linearLiftSubsystemBottomLimitSwitch;
    public static DigitalInput linearLiftSubsystemTopLimitSwitch;
    public static DigitalInput fourBarSubsystemForeBackFront;
    public static DigitalInput fourBarSubsystemForeBackBack;
    public static DigitalInput fourBarSubsystemGrabBackLimitSwitch;
    public static SpeedController fourBarSubsystemLeftMotor1;
    public static SpeedController fourBarSubsystemLeftMotor2;
    public static SpeedController fourBarSubsystemRightMotor1;
    public static SpeedController fourBarSubsystemRightMotor2;
    public static DoubleSolenoid fourBarSubsystemSecondaryActuatorSolenoid;
    public static Gyro genericSensorSubsystemGyro;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static BuiltInAccelerometer genericSensorSubsystemAccelerometer;
	public static Encoder driveSubsystemLeftEncoder;
	public static Encoder driveSubsystemRightEncoder;
	public static DoubleSolenoid driveSubsystemPTO;
	public static DoubleSolenoid driveSubsystemHighGear;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSubsystemLeftFrontMotor = new Talon(0);
        LiveWindow.addActuator("Drive Subsystem", "Left Front Motor", (Talon) driveSubsystemLeftFrontMotor);
        
        driveSubsystemLeftBackMotor = new Talon(1);
        LiveWindow.addActuator("Drive Subsystem", "Left Back Motor", (Talon) driveSubsystemLeftBackMotor);
        
        driveSubsystemRightFrontMotor = new Talon(2);
        LiveWindow.addActuator("Drive Subsystem", "Right Front Motor", (Talon) driveSubsystemRightFrontMotor);
        
        driveSubsystemRightBackMotor = new Talon(3);
        LiveWindow.addActuator("Drive Subsystem", "Right Back Motor", (Talon) driveSubsystemRightBackMotor);
        
        driveSubsystemDrive = new RobotDrive(driveSubsystemLeftFrontMotor, driveSubsystemLeftBackMotor,
              driveSubsystemRightFrontMotor, driveSubsystemRightBackMotor);
        
        driveSubsystemDrive.setSafetyEnabled(true);
        driveSubsystemDrive.setExpiration(0.1);
        driveSubsystemDrive.setSensitivity(0.5);
        driveSubsystemDrive.setMaxOutput(1.0);
        driveSubsystemDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, false);
        driveSubsystemDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, false);
        driveSubsystemDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, false);
        driveSubsystemDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, false);
        pneumaticSubsystemCompressor = new Compressor(0);
        
        
        canArmSubsystemTopLimitSwitch = new DigitalInput(4);
        LiveWindow.addSensor("Can Arm Subsystem", "Top Limit Switch", canArmSubsystemTopLimitSwitch);
        
        canArmSubsystemBottomLimitSwitch = new DigitalInput(5);
        LiveWindow.addSensor("Can Arm Subsystem", "Bottom Limit Switch", canArmSubsystemBottomLimitSwitch);
        
        canArmSubsystemLeftWinchSpeedController = new CANTalon(2);
        canArmSubsystemRightWinchSpeedController = new CANTalon(3);
        //LiveWindow.addActuator("Can Arm Subsystem", "Winch Speed Controller", (CANTalon) canArmSubsystemWinchSpeedController);
        
        linearLiftSubsystemBottomLimitSwitch = new DigitalInput(7);
        LiveWindow.addSensor("Linear Lift Subsystem", "Bottom Limit Switch", linearLiftSubsystemBottomLimitSwitch);
        
        linearLiftSubsystemTopLimitSwitch = new DigitalInput(8);
        LiveWindow.addSensor("Linear Lift Subsystem", "Top Limit Switch", linearLiftSubsystemTopLimitSwitch);
        
        fourBarSubsystemForeBackFront = new DigitalInput(9);
        LiveWindow.addSensor("Four Bar Subsystem", "Fore/Back Front", fourBarSubsystemForeBackFront);
        
        fourBarSubsystemForeBackBack = new DigitalInput(10);
        LiveWindow.addSensor("Four Bar Subsystem", "Fore/Back Back", fourBarSubsystemForeBackBack);
        
        fourBarSubsystemGrabBackLimitSwitch = new DigitalInput(6);
        LiveWindow.addSensor("Four Bar Subsystem", "Grab Back Limit Switch", fourBarSubsystemGrabBackLimitSwitch);
        
        fourBarSubsystemLeftMotor1 = new Talon(4);
        LiveWindow.addActuator("Four Bar Subsystem", "Left Motor 1", (Talon) fourBarSubsystemLeftMotor1);
        
        fourBarSubsystemRightMotor1 = new Talon(5);
        LiveWindow.addActuator("Four Bar Subsystem", "Right Motor 1", (Talon) fourBarSubsystemRightMotor1);
        
        fourBarSubsystemSecondaryActuatorSolenoid = new DoubleSolenoid(4, 5);      
        LiveWindow.addActuator("Four Bar Subsystem", "Secondary Actuator Solenoid", fourBarSubsystemSecondaryActuatorSolenoid);
        
        genericSensorSubsystemGyro = new Gyro(0);
        LiveWindow.addSensor("Generic Sensor Subsystem", "Gyro", genericSensorSubsystemGyro);
        genericSensorSubsystemGyro.setSensitivity(0.007);
        genericSensorSubsystemGyro.reset();
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        genericSensorSubsystemAccelerometer = new BuiltInAccelerometer();
        LiveWindow.addSensor("Generic Sensor Subsystem", "Accelerometer", genericSensorSubsystemAccelerometer);
        driveSubsystemLeftEncoder = new Encoder(0,1, true, EncodingType.k4X);
        driveSubsystemLeftEncoder.setDistancePerPulse(360);
        driveSubsystemRightEncoder = new Encoder(2,3, true, EncodingType.k4X);
        driveSubsystemRightEncoder.setDistancePerPulse(360);
        
        driveSubsystemPTO = new DoubleSolenoid(0, 1);
        driveSubsystemPTO.set(Value.kForward);
        driveSubsystemHighGear = new DoubleSolenoid(2, 3);
        driveSubsystemHighGear.set(Value.kReverse);
        
        fourBarSubsystemSecondaryActuatorSolenoid.set(Value.kForward);
    }
}
